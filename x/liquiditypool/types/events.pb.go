// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sunrise/liquiditypool/events.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventSetPool struct {
	PoolId               uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	DenomBase            string `protobuf:"bytes,2,opt,name=denom_base,json=denomBase,proto3" json:"denom_base,omitempty"`
	DenomQuote           string `protobuf:"bytes,3,opt,name=denom_quote,json=denomQuote,proto3" json:"denom_quote,omitempty"`
	FeeRate              string `protobuf:"bytes,4,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
	PriceRatio           string `protobuf:"bytes,5,opt,name=price_ratio,json=priceRatio,proto3" json:"price_ratio,omitempty"`
	BaseOffset           string `protobuf:"bytes,6,opt,name=base_offset,json=baseOffset,proto3" json:"base_offset,omitempty"`
	CurrentTick          int64  `protobuf:"varint,7,opt,name=current_tick,json=currentTick,proto3" json:"current_tick,omitempty"`
	CurrentTickLiquidity string `protobuf:"bytes,8,opt,name=current_tick_liquidity,json=currentTickLiquidity,proto3" json:"current_tick_liquidity,omitempty"`
	CurrentSqrtPrice     string `protobuf:"bytes,9,opt,name=current_sqrt_price,json=currentSqrtPrice,proto3" json:"current_sqrt_price,omitempty"`
}

func (m *EventSetPool) Reset()         { *m = EventSetPool{} }
func (m *EventSetPool) String() string { return proto.CompactTextString(m) }
func (*EventSetPool) ProtoMessage()    {}
func (*EventSetPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ee21161ab584fa1, []int{0}
}
func (m *EventSetPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSetPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSetPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSetPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSetPool.Merge(m, src)
}
func (m *EventSetPool) XXX_Size() int {
	return m.Size()
}
func (m *EventSetPool) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSetPool.DiscardUnknown(m)
}

var xxx_messageInfo_EventSetPool proto.InternalMessageInfo

func (m *EventSetPool) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *EventSetPool) GetDenomBase() string {
	if m != nil {
		return m.DenomBase
	}
	return ""
}

func (m *EventSetPool) GetDenomQuote() string {
	if m != nil {
		return m.DenomQuote
	}
	return ""
}

func (m *EventSetPool) GetFeeRate() string {
	if m != nil {
		return m.FeeRate
	}
	return ""
}

func (m *EventSetPool) GetPriceRatio() string {
	if m != nil {
		return m.PriceRatio
	}
	return ""
}

func (m *EventSetPool) GetBaseOffset() string {
	if m != nil {
		return m.BaseOffset
	}
	return ""
}

func (m *EventSetPool) GetCurrentTick() int64 {
	if m != nil {
		return m.CurrentTick
	}
	return 0
}

func (m *EventSetPool) GetCurrentTickLiquidity() string {
	if m != nil {
		return m.CurrentTickLiquidity
	}
	return ""
}

func (m *EventSetPool) GetCurrentSqrtPrice() string {
	if m != nil {
		return m.CurrentSqrtPrice
	}
	return ""
}

type EventRemovePool struct {
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (m *EventRemovePool) Reset()         { *m = EventRemovePool{} }
func (m *EventRemovePool) String() string { return proto.CompactTextString(m) }
func (*EventRemovePool) ProtoMessage()    {}
func (*EventRemovePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ee21161ab584fa1, []int{1}
}
func (m *EventRemovePool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRemovePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRemovePool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRemovePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRemovePool.Merge(m, src)
}
func (m *EventRemovePool) XXX_Size() int {
	return m.Size()
}
func (m *EventRemovePool) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRemovePool.DiscardUnknown(m)
}

var xxx_messageInfo_EventRemovePool proto.InternalMessageInfo

func (m *EventRemovePool) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

type EventSetPosition struct {
	PositionId uint64 `protobuf:"varint,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
	Address    string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	PoolId     uint64 `protobuf:"varint,3,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	LowerTick  string `protobuf:"bytes,4,opt,name=lower_tick,json=lowerTick,proto3" json:"lower_tick,omitempty"`
	UpperTick  string `protobuf:"bytes,5,opt,name=upper_tick,json=upperTick,proto3" json:"upper_tick,omitempty"`
	Liquidity  string `protobuf:"bytes,6,opt,name=liquidity,proto3" json:"liquidity,omitempty"`
}

func (m *EventSetPosition) Reset()         { *m = EventSetPosition{} }
func (m *EventSetPosition) String() string { return proto.CompactTextString(m) }
func (*EventSetPosition) ProtoMessage()    {}
func (*EventSetPosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ee21161ab584fa1, []int{2}
}
func (m *EventSetPosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSetPosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSetPosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSetPosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSetPosition.Merge(m, src)
}
func (m *EventSetPosition) XXX_Size() int {
	return m.Size()
}
func (m *EventSetPosition) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSetPosition.DiscardUnknown(m)
}

var xxx_messageInfo_EventSetPosition proto.InternalMessageInfo

func (m *EventSetPosition) GetPositionId() uint64 {
	if m != nil {
		return m.PositionId
	}
	return 0
}

func (m *EventSetPosition) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *EventSetPosition) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *EventSetPosition) GetLowerTick() string {
	if m != nil {
		return m.LowerTick
	}
	return ""
}

func (m *EventSetPosition) GetUpperTick() string {
	if m != nil {
		return m.UpperTick
	}
	return ""
}

func (m *EventSetPosition) GetLiquidity() string {
	if m != nil {
		return m.Liquidity
	}
	return ""
}

type EventRemovePosition struct {
	PositionId uint64 `protobuf:"varint,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
}

func (m *EventRemovePosition) Reset()         { *m = EventRemovePosition{} }
func (m *EventRemovePosition) String() string { return proto.CompactTextString(m) }
func (*EventRemovePosition) ProtoMessage()    {}
func (*EventRemovePosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ee21161ab584fa1, []int{3}
}
func (m *EventRemovePosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRemovePosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRemovePosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRemovePosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRemovePosition.Merge(m, src)
}
func (m *EventRemovePosition) XXX_Size() int {
	return m.Size()
}
func (m *EventRemovePosition) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRemovePosition.DiscardUnknown(m)
}

var xxx_messageInfo_EventRemovePosition proto.InternalMessageInfo

func (m *EventRemovePosition) GetPositionId() uint64 {
	if m != nil {
		return m.PositionId
	}
	return 0
}

type EventCollectFees struct {
	Sender        string        `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	PositionId    uint64        `protobuf:"varint,2,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
	CollectedFees []*types.Coin `protobuf:"bytes,3,rep,name=collected_fees,json=collectedFees,proto3" json:"collected_fees,omitempty"`
}

func (m *EventCollectFees) Reset()         { *m = EventCollectFees{} }
func (m *EventCollectFees) String() string { return proto.CompactTextString(m) }
func (*EventCollectFees) ProtoMessage()    {}
func (*EventCollectFees) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ee21161ab584fa1, []int{4}
}
func (m *EventCollectFees) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCollectFees) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCollectFees.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCollectFees) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCollectFees.Merge(m, src)
}
func (m *EventCollectFees) XXX_Size() int {
	return m.Size()
}
func (m *EventCollectFees) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCollectFees.DiscardUnknown(m)
}

var xxx_messageInfo_EventCollectFees proto.InternalMessageInfo

func (m *EventCollectFees) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventCollectFees) GetPositionId() uint64 {
	if m != nil {
		return m.PositionId
	}
	return 0
}

func (m *EventCollectFees) GetCollectedFees() []*types.Coin {
	if m != nil {
		return m.CollectedFees
	}
	return nil
}

type EventSwapExactAmountIn struct {
	Sender     string      `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	PoolId     uint64      `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	TokenIn    *types.Coin `protobuf:"bytes,3,opt,name=token_in,json=tokenIn,proto3" json:"token_in,omitempty"`
	DenomOut   string      `protobuf:"bytes,4,opt,name=denom_out,json=denomOut,proto3" json:"denom_out,omitempty"`
	FeeEnabled bool        `protobuf:"varint,5,opt,name=fee_enabled,json=feeEnabled,proto3" json:"fee_enabled,omitempty"`
}

func (m *EventSwapExactAmountIn) Reset()         { *m = EventSwapExactAmountIn{} }
func (m *EventSwapExactAmountIn) String() string { return proto.CompactTextString(m) }
func (*EventSwapExactAmountIn) ProtoMessage()    {}
func (*EventSwapExactAmountIn) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ee21161ab584fa1, []int{5}
}
func (m *EventSwapExactAmountIn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSwapExactAmountIn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSwapExactAmountIn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSwapExactAmountIn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSwapExactAmountIn.Merge(m, src)
}
func (m *EventSwapExactAmountIn) XXX_Size() int {
	return m.Size()
}
func (m *EventSwapExactAmountIn) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSwapExactAmountIn.DiscardUnknown(m)
}

var xxx_messageInfo_EventSwapExactAmountIn proto.InternalMessageInfo

func (m *EventSwapExactAmountIn) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventSwapExactAmountIn) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *EventSwapExactAmountIn) GetTokenIn() *types.Coin {
	if m != nil {
		return m.TokenIn
	}
	return nil
}

func (m *EventSwapExactAmountIn) GetDenomOut() string {
	if m != nil {
		return m.DenomOut
	}
	return ""
}

func (m *EventSwapExactAmountIn) GetFeeEnabled() bool {
	if m != nil {
		return m.FeeEnabled
	}
	return false
}

type EventSwapExactAmountout struct {
	Sender     string      `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	PoolId     uint64      `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	TokenOut   *types.Coin `protobuf:"bytes,3,opt,name=token_out,json=tokenOut,proto3" json:"token_out,omitempty"`
	DenomIn    string      `protobuf:"bytes,4,opt,name=denom_in,json=denomIn,proto3" json:"denom_in,omitempty"`
	FeeEnabled bool        `protobuf:"varint,5,opt,name=fee_enabled,json=feeEnabled,proto3" json:"fee_enabled,omitempty"`
}

func (m *EventSwapExactAmountout) Reset()         { *m = EventSwapExactAmountout{} }
func (m *EventSwapExactAmountout) String() string { return proto.CompactTextString(m) }
func (*EventSwapExactAmountout) ProtoMessage()    {}
func (*EventSwapExactAmountout) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ee21161ab584fa1, []int{6}
}
func (m *EventSwapExactAmountout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSwapExactAmountout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSwapExactAmountout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSwapExactAmountout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSwapExactAmountout.Merge(m, src)
}
func (m *EventSwapExactAmountout) XXX_Size() int {
	return m.Size()
}
func (m *EventSwapExactAmountout) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSwapExactAmountout.DiscardUnknown(m)
}

var xxx_messageInfo_EventSwapExactAmountout proto.InternalMessageInfo

func (m *EventSwapExactAmountout) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventSwapExactAmountout) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *EventSwapExactAmountout) GetTokenOut() *types.Coin {
	if m != nil {
		return m.TokenOut
	}
	return nil
}

func (m *EventSwapExactAmountout) GetDenomIn() string {
	if m != nil {
		return m.DenomIn
	}
	return ""
}

func (m *EventSwapExactAmountout) GetFeeEnabled() bool {
	if m != nil {
		return m.FeeEnabled
	}
	return false
}

func init() {
	proto.RegisterType((*EventSetPool)(nil), "sunrise.liquiditypool.EventSetPool")
	proto.RegisterType((*EventRemovePool)(nil), "sunrise.liquiditypool.EventRemovePool")
	proto.RegisterType((*EventSetPosition)(nil), "sunrise.liquiditypool.EventSetPosition")
	proto.RegisterType((*EventRemovePosition)(nil), "sunrise.liquiditypool.EventRemovePosition")
	proto.RegisterType((*EventCollectFees)(nil), "sunrise.liquiditypool.EventCollectFees")
	proto.RegisterType((*EventSwapExactAmountIn)(nil), "sunrise.liquiditypool.EventSwapExactAmountIn")
	proto.RegisterType((*EventSwapExactAmountout)(nil), "sunrise.liquiditypool.EventSwapExactAmountout")
}

func init() {
	proto.RegisterFile("sunrise/liquiditypool/events.proto", fileDescriptor_9ee21161ab584fa1)
}

var fileDescriptor_9ee21161ab584fa1 = []byte{
	// 642 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4f, 0x6f, 0xd3, 0x4e,
	0x10, 0xad, 0x93, 0xfe, 0x92, 0x78, 0xda, 0x1f, 0x54, 0x06, 0x5a, 0x17, 0xa8, 0x09, 0x3e, 0x45,
	0x08, 0xd9, 0x2a, 0x94, 0x9e, 0xa1, 0x55, 0x91, 0x22, 0x21, 0xb5, 0xb8, 0x9c, 0xb8, 0x58, 0x8e,
	0x3d, 0x86, 0x55, 0x9d, 0x5d, 0x67, 0x77, 0xdd, 0x3f, 0x1f, 0x02, 0x89, 0x2f, 0x04, 0x07, 0x4e,
	0x48, 0x5c, 0x7a, 0xe4, 0x88, 0xda, 0x2f, 0x82, 0x76, 0xd7, 0x6e, 0xd3, 0x02, 0x2d, 0xdc, 0x3c,
	0x6f, 0xe6, 0x8d, 0xe7, 0xbd, 0xd9, 0x5d, 0xf0, 0x45, 0x45, 0x39, 0x11, 0x18, 0x16, 0x64, 0x52,
	0x91, 0x8c, 0xc8, 0xa3, 0x92, 0xb1, 0x22, 0xc4, 0x7d, 0xa4, 0x52, 0x04, 0x25, 0x67, 0x92, 0x39,
	0x77, 0xea, 0x9a, 0xe0, 0x42, 0xcd, 0x5d, 0x2f, 0x65, 0x62, 0xcc, 0x44, 0x38, 0x4a, 0x04, 0x86,
	0xfb, 0xab, 0x23, 0x94, 0xc9, 0x6a, 0x98, 0x32, 0x42, 0x0d, 0xcd, 0xff, 0xd6, 0x82, 0xf9, 0x2d,
	0xd5, 0x67, 0x17, 0xe5, 0x0e, 0x63, 0x85, 0xb3, 0x04, 0x5d, 0x45, 0x8c, 0x49, 0xe6, 0x5a, 0x7d,
	0x6b, 0x30, 0x1b, 0x75, 0x54, 0x38, 0xcc, 0x9c, 0x15, 0x80, 0x0c, 0x29, 0x1b, 0xc7, 0xaa, 0x95,
	0xdb, 0xea, 0x5b, 0x03, 0x3b, 0xb2, 0x35, 0xb2, 0x91, 0x08, 0x74, 0x1e, 0xc0, 0x9c, 0x49, 0x4f,
	0x2a, 0x26, 0xd1, 0x6d, 0xeb, 0xbc, 0x61, 0xbc, 0x56, 0x88, 0xb3, 0x0c, 0xbd, 0x1c, 0x31, 0xe6,
	0x89, 0x44, 0x77, 0x56, 0x67, 0xbb, 0x39, 0x62, 0x94, 0x48, 0xcd, 0x2d, 0x39, 0x49, 0x75, 0x92,
	0x30, 0xf7, 0x3f, 0xc3, 0xd5, 0x50, 0xa4, 0x10, 0x55, 0xa0, 0xfe, 0x1a, 0xb3, 0x3c, 0x17, 0x28,
	0xdd, 0x8e, 0x29, 0x50, 0xd0, 0xb6, 0x46, 0x9c, 0x87, 0x30, 0x9f, 0x56, 0x9c, 0x23, 0x95, 0xb1,
	0x24, 0xe9, 0x9e, 0xdb, 0xed, 0x5b, 0x83, 0x76, 0x34, 0x57, 0x63, 0x6f, 0x48, 0xba, 0xe7, 0xac,
	0xc1, 0xe2, 0x74, 0x49, 0x7c, 0xe6, 0x93, 0xdb, 0xd3, 0xed, 0x6e, 0x4f, 0x15, 0xbf, 0x6a, 0x72,
	0xce, 0x63, 0x70, 0x1a, 0x96, 0x98, 0x70, 0x19, 0xeb, 0xa1, 0x5c, 0x5b, 0x33, 0x16, 0xea, 0xcc,
	0xee, 0x84, 0xcb, 0x1d, 0x85, 0xfb, 0x8f, 0xe0, 0xa6, 0x36, 0x33, 0xc2, 0x31, 0xdb, 0xc7, 0x2b,
	0xfd, 0xf4, 0xbf, 0x58, 0xb0, 0x70, 0xee, 0xbc, 0x20, 0x92, 0x30, 0xaa, 0x9d, 0xa8, 0xbf, 0xcf,
	0x19, 0xd0, 0x40, 0xc3, 0xcc, 0x71, 0xa1, 0x9b, 0x64, 0x19, 0x47, 0x21, 0xea, 0x15, 0x34, 0xe1,
	0xf4, 0x8f, 0xda, 0x97, 0x17, 0x57, 0xb0, 0x03, 0xe4, 0xc6, 0x19, 0x63, 0xbd, 0xad, 0x11, 0xed,
	0xcb, 0x0a, 0x40, 0x55, 0x96, 0x4d, 0xda, 0x78, 0x6f, 0x6b, 0x44, 0xa7, 0xef, 0x83, 0x7d, 0xee,
	0x54, 0xa7, 0x26, 0x37, 0x80, 0xbf, 0x0e, 0xb7, 0x2e, 0x08, 0xfe, 0x4b, 0x19, 0xfe, 0x87, 0x46,
	0xfc, 0x26, 0x2b, 0x0a, 0x4c, 0xe5, 0x4b, 0x44, 0xe1, 0x2c, 0x42, 0x47, 0x20, 0xcd, 0x90, 0x6b,
	0x82, 0x1d, 0xd5, 0xd1, 0xe5, 0x6e, 0xad, 0x5f, 0x4c, 0x79, 0x0e, 0x37, 0x52, 0xd3, 0x07, 0xb3,
	0x38, 0x47, 0x14, 0x6e, 0xbb, 0xdf, 0x1e, 0xcc, 0x3d, 0x59, 0x0e, 0xcc, 0xe9, 0x0f, 0xd4, 0x49,
	0x09, 0xea, 0xd3, 0x1f, 0x6c, 0x32, 0x42, 0xa3, 0xff, 0xcf, 0x08, 0xea, 0xd7, 0xfe, 0x27, 0x0b,
	0x16, 0xcd, 0x32, 0x0e, 0x92, 0x72, 0xeb, 0x30, 0x49, 0xe5, 0x8b, 0x31, 0xab, 0xa8, 0x1c, 0xd2,
	0x3f, 0x4e, 0x35, 0xe5, 0x77, 0xeb, 0x82, 0xdf, 0x6b, 0xd0, 0x93, 0x6c, 0x0f, 0x69, 0x4c, 0xa8,
	0xde, 0xc4, 0x95, 0x73, 0x74, 0x75, 0xe9, 0x90, 0x3a, 0xf7, 0xc0, 0x5c, 0xa6, 0x98, 0x55, 0xb2,
	0x5e, 0x52, 0x4f, 0x03, 0xdb, 0x95, 0x54, 0x0e, 0xa8, 0xbb, 0x83, 0x34, 0x19, 0x15, 0x98, 0xe9,
	0x25, 0xf5, 0x22, 0xc8, 0x11, 0xb7, 0x0c, 0xe2, 0x7f, 0xb6, 0x60, 0xe9, 0x77, 0xf3, 0xb3, 0x4a,
	0xfe, 0xbb, 0x80, 0x75, 0xb0, 0x8d, 0x00, 0x35, 0xca, 0xb5, 0x0a, 0x8c, 0x58, 0x35, 0xe5, 0x32,
	0x98, 0x89, 0x95, 0xf0, 0xfa, 0x86, 0xeb, 0x78, 0x48, 0xaf, 0x15, 0xb0, 0xb1, 0xfd, 0xf5, 0xc4,
	0xb3, 0x8e, 0x4f, 0x3c, 0xeb, 0xc7, 0x89, 0x67, 0x7d, 0x3c, 0xf5, 0x66, 0x8e, 0x4f, 0xbd, 0x99,
	0xef, 0xa7, 0xde, 0xcc, 0xdb, 0x67, 0xef, 0x88, 0x7c, 0x5f, 0x8d, 0x82, 0x94, 0x8d, 0xc3, 0xfa,
	0x8d, 0x2b, 0x92, 0x23, 0xe4, 0x4d, 0x10, 0x1e, 0x5e, 0x7a, 0x16, 0xe5, 0x51, 0x89, 0x62, 0xd4,
	0xd1, 0xef, 0xdb, 0xd3, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xab, 0xc1, 0xde, 0xbf, 0x3c, 0x05,
	0x00, 0x00,
}

func (m *EventSetPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSetPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSetPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CurrentSqrtPrice) > 0 {
		i -= len(m.CurrentSqrtPrice)
		copy(dAtA[i:], m.CurrentSqrtPrice)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CurrentSqrtPrice)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.CurrentTickLiquidity) > 0 {
		i -= len(m.CurrentTickLiquidity)
		copy(dAtA[i:], m.CurrentTickLiquidity)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CurrentTickLiquidity)))
		i--
		dAtA[i] = 0x42
	}
	if m.CurrentTick != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CurrentTick))
		i--
		dAtA[i] = 0x38
	}
	if len(m.BaseOffset) > 0 {
		i -= len(m.BaseOffset)
		copy(dAtA[i:], m.BaseOffset)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.BaseOffset)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PriceRatio) > 0 {
		i -= len(m.PriceRatio)
		copy(dAtA[i:], m.PriceRatio)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PriceRatio)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FeeRate) > 0 {
		i -= len(m.FeeRate)
		copy(dAtA[i:], m.FeeRate)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.FeeRate)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DenomQuote) > 0 {
		i -= len(m.DenomQuote)
		copy(dAtA[i:], m.DenomQuote)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DenomQuote)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DenomBase) > 0 {
		i -= len(m.DenomBase)
		copy(dAtA[i:], m.DenomBase)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DenomBase)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventRemovePool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRemovePool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRemovePool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventSetPosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSetPosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSetPosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Liquidity) > 0 {
		i -= len(m.Liquidity)
		copy(dAtA[i:], m.Liquidity)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Liquidity)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.UpperTick) > 0 {
		i -= len(m.UpperTick)
		copy(dAtA[i:], m.UpperTick)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.UpperTick)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LowerTick) > 0 {
		i -= len(m.LowerTick)
		copy(dAtA[i:], m.LowerTick)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.LowerTick)))
		i--
		dAtA[i] = 0x22
	}
	if m.PoolId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.PositionId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.PositionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventRemovePosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRemovePosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRemovePosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PositionId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.PositionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventCollectFees) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCollectFees) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCollectFees) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CollectedFees) > 0 {
		for iNdEx := len(m.CollectedFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CollectedFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.PositionId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.PositionId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSwapExactAmountIn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSwapExactAmountIn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSwapExactAmountIn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeeEnabled {
		i--
		if m.FeeEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.DenomOut) > 0 {
		i -= len(m.DenomOut)
		copy(dAtA[i:], m.DenomOut)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DenomOut)))
		i--
		dAtA[i] = 0x22
	}
	if m.TokenIn != nil {
		{
			size, err := m.TokenIn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PoolId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSwapExactAmountout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSwapExactAmountout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSwapExactAmountout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeeEnabled {
		i--
		if m.FeeEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.DenomIn) > 0 {
		i -= len(m.DenomIn)
		copy(dAtA[i:], m.DenomIn)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DenomIn)))
		i--
		dAtA[i] = 0x22
	}
	if m.TokenOut != nil {
		{
			size, err := m.TokenOut.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PoolId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventSetPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovEvents(uint64(m.PoolId))
	}
	l = len(m.DenomBase)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.DenomQuote)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.FeeRate)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.PriceRatio)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.BaseOffset)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.CurrentTick != 0 {
		n += 1 + sovEvents(uint64(m.CurrentTick))
	}
	l = len(m.CurrentTickLiquidity)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.CurrentSqrtPrice)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventRemovePool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovEvents(uint64(m.PoolId))
	}
	return n
}

func (m *EventSetPosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PositionId != 0 {
		n += 1 + sovEvents(uint64(m.PositionId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovEvents(uint64(m.PoolId))
	}
	l = len(m.LowerTick)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.UpperTick)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Liquidity)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventRemovePosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PositionId != 0 {
		n += 1 + sovEvents(uint64(m.PositionId))
	}
	return n
}

func (m *EventCollectFees) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.PositionId != 0 {
		n += 1 + sovEvents(uint64(m.PositionId))
	}
	if len(m.CollectedFees) > 0 {
		for _, e := range m.CollectedFees {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventSwapExactAmountIn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovEvents(uint64(m.PoolId))
	}
	if m.TokenIn != nil {
		l = m.TokenIn.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.DenomOut)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.FeeEnabled {
		n += 2
	}
	return n
}

func (m *EventSwapExactAmountout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovEvents(uint64(m.PoolId))
	}
	if m.TokenOut != nil {
		l = m.TokenOut.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.DenomIn)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.FeeEnabled {
		n += 2
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventSetPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSetPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSetPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomBase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomBase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomQuote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomQuote = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceRatio = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseOffset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseOffset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentTick", wireType)
			}
			m.CurrentTick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentTick |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentTickLiquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentTickLiquidity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentSqrtPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentSqrtPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRemovePool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRemovePool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRemovePool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSetPosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSetPosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSetPosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			m.PositionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PositionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowerTick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LowerTick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpperTick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpperTick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Liquidity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRemovePosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRemovePosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRemovePosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			m.PositionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PositionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCollectFees) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCollectFees: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCollectFees: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			m.PositionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PositionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectedFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectedFees = append(m.CollectedFees, &types.Coin{})
			if err := m.CollectedFees[len(m.CollectedFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSwapExactAmountIn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSwapExactAmountIn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSwapExactAmountIn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TokenIn == nil {
				m.TokenIn = &types.Coin{}
			}
			if err := m.TokenIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomOut = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FeeEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSwapExactAmountout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSwapExactAmountout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSwapExactAmountout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TokenOut == nil {
				m.TokenOut = &types.Coin{}
			}
			if err := m.TokenOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FeeEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
